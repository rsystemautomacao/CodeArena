const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function initDatabase() {
  try {
    console.log('üöÄ Iniciando configura√ß√£o do banco de dados...');
    
    // Conectar ao MongoDB
    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://rsautomacao2000_db_user:%40Desbravadores%4093@codearena-cluster.6b3h9ce.mongodb.net/?retryWrites=true&w=majority&appName=CodeArena-Cluster';
    
    console.log('üîå Conectando ao MongoDB Atlas...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado com sucesso!');

    const db = mongoose.connection.db;
    
    // 1. Criar database 'codearena' se n√£o existir
    console.log('üìÅ Configurando database...');
    
    // 2. Criar collections
    const collections = ['users', 'invites', 'classrooms', 'exercises', 'submissions'];
    
    for (const collectionName of collections) {
      try {
        await db.createCollection(collectionName);
        console.log(`‚úÖ Collection '${collectionName}' criada`);
      } catch (error) {
        if (error.code === 48) {
          console.log(`‚ÑπÔ∏è Collection '${collectionName}' j√° existe`);
        } else {
          console.error(`‚ùå Erro: ${error.message}`);
        }
      }
    }

    // 3. Criar superadmin
    console.log('üëë Configurando superadmin...');
    
    const usersCollection = db.collection('users');
    
    // Verificar se j√° existe
    const existingSuperadmin = await usersCollection.findOne({ role: 'superadmin' });
    
    if (!existingSuperadmin) {
      const hashedPassword = await bcrypt.hash('@Desbravadores@93', 12);
      
      const superadmin = {
        name: 'Super Admin',
        email: 'admin@rsystem.com',
        password: hashedPassword,
        role: 'superadmin',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await usersCollection.insertOne(superadmin);
      console.log('‚úÖ Superadmin criado!');
      console.log('üìß Email: admin@rsystem.com');
      console.log('üîë Senha: @Desbravadores@93');
    } else {
      console.log('‚ÑπÔ∏è Superadmin j√° existe');
    }

    // 4. Criar √≠ndices
    console.log('üîç Criando √≠ndices...');
    
    try {
      await usersCollection.createIndex({ email: 1 }, { unique: true });
      await usersCollection.createIndex({ role: 1 });
      console.log('‚úÖ √çndices da collection users criados');
    } catch (error) {
      console.log('‚ÑπÔ∏è √çndices j√° existem ou erro:', error.message);
    }

    // 5. Verificar resultado
    console.log('üìä Verificando configura√ß√£o...');
    
    const collectionsList = await db.listCollections().toArray();
    console.log('üìã Collections dispon√≠veis:');
    collectionsList.forEach(col => {
      console.log(`  - ${col.name}`);
    });

    const userCount = await usersCollection.countDocuments();
    console.log(`üë• Total de usu√°rios: ${userCount}`);

    console.log('üéâ Banco de dados configurado com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado');
  }
}

// Executar
initDatabase()
  .then(() => {
    console.log('‚úÖ Configura√ß√£o conclu√≠da!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Falha na configura√ß√£o:', error);
    process.exit(1);
  });
